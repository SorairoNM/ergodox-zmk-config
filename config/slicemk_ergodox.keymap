#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define U_MOUSE_MOVE_MAX 5000
#define U_MOUSE_SCROLL_MAX 50

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)

&mmv	{
	time-to-max-speed-ms = <600>;
	acceleration-exponent=<1>;
	};

&sk {
	quick-release;
};

/ {
	keymap {
		compatible = "zmk,keymap";
		layer_0 {
			bindings = <
				&bootloader
				&kp ESC    &kp N1   &kp N2   &kp N3       &kp N4   &kp N5   &none    &none     &kp N6  &kp N7   &kp N8   &kp N9   &kp N0   &kp MINUS
				&kp TAB    &kp Q    &kp W    &kp E        &kp R    &kp T    &none    &none     &kp Y   &kp U    &kp I    &kp O    &kp P    &kp RET
				&kp CAPS   &kp A    &kp S    &kp D        &kp F    &kp G                       &kp H   &kp J    &kp K    &kp L    &kp SEMI &kp COLON
				&kp LSHIFT &kp Z    &kp X    &kp C        &kp V    &kp B    &none    &none     &kp N   &kp M    &kp LBKT &kp RBKT &kp FSLH &kp RSHIFT
				&kp LCTRL  &kp HOME &kp LWIN &mt LALT F23 &kp BSPC                                     &kp LARW &kp RARW &kp RALT &kp END  &tog 1
				                                                   &none    &none    &none     &kp DOT
				                                          &kp CMMA &kp DOWN &none    &none     &kp F24 &kp SPC
				                                                            &kp UP   &lt 2 F22
			>;
		};
		layer_1 {
			bindings = <
				&bootloader
				&trans &trans &trans &trans    &trans    &trans &trans &trans &trans &trans         &trans          &trans &trans &trans
				&trans &trans &trans &trans    &trans    &trans &trans &trans &trans &trans         &trans          &trans &trans &trans
				&trans &trans &trans &kp PLUS  &kp EQUAL &trans               &trans &kp MINUS      &kp UNDERSCORE  &trans &trans &trans
				&trans &trans &trans &kp LBKT  &kp RBKT  &trans &trans &trans &trans &kp LEFT_BRACE &kp RIGHT_BRACE &trans &trans &trans
				&trans &trans &trans &trans    &trans                                &trans         &trans          &trans &trans &trans
				                                         &trans &trans &trans &trans
				                               &trans    &trans &trans &trans &trans &trans
				                                                &trans &trans
			>;
		};
		layer_2 {
			bindings = <
				&bootloader
				&trans &trans &trans         &trans         &trans          &trans &trans &trans &trans &trans    &trans           &trans         &trans &trans
				&trans &trans &kp PG_DN      &mmv MOVE_UP   &kp PG_UP       &trans &trans &trans &trans &trans    &mwh SCROLL_DOWN &mwh SCROLL_UP &trans &trans
				&trans &trans &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &trans               &trans &mkp LCLK &mkp RCLK        &trans         &trans &trans
				&trans &trans &trans         &trans         &trans          &trans &trans &trans &trans &trans    &trans           &trans         &trans &trans
				&trans &trans &trans         &trans         &trans                                      &trans    &trans           &trans         &trans &mo 3
				                                                            &trans &trans &trans &trans
				                                            &trans          &trans &trans &trans &trans &trans
				                                                                   &trans &trans
			>;
		};
		layer_3 {
			bindings = <
				&bootloader
				&bootloader &trans &trans  &trans  &trans  &trans &trans &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans  
				&trans      &kp F1 &kp F2  &kp F3  &kp F4  &trans &trans &trans     &trans       &kp F13      &kp F14      &kp F15      &kp F16      &out OUT_USB
				&trans      &kp F5 &kp F6  &kp F7  &kp F8  &trans                   &trans       &kp F17      &kp F18      &kp F19      &kp F20      &out OUT_BLE
				&trans      &kp F9 &kp F10 &kp F11 &kp F12 &trans &trans &trans     &trans       &kp F21      &kp F22      &kp F23      &kp F24      &out OUT_TOG
				&trans      &trans &trans  &trans  &trans                                        &trans       &trans       &trans       &trans       &trans
				                                           &trans &trans &trans     &trans
				                                   &trans  &trans &trans &trans     &trans       &trans
				                                                  &trans &trans
			>;
		};
	};

	ZMK_MACRO(m_a46103d6, wait-ms = <40>; tap-ms = <40>; bindings = <&macro_tap &kp GRAVE>, <&macro_tap &kp GRAVE>, <&macro_tap &kp GRAVE>;)
	ZMK_MACRO(m_5246c76f, wait-ms = <40>; tap-ms = <40>; bindings = <&macro_tap &kp ASTERISK>, <&macro_tap &kp ASTERISK>;)
};
